

CREATE COMPUTE MODULE AUDIT_LOG_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		DECLARE BNAME CHARACTER BrokerName;
		DECLARE SNAME CHARACTER ExecutionGroupLabel; 
		DECLARE APPNAME CHARACTER ApplicationLabel;
		DECLARE FLOWNAME CHARACTER MessageFlowLabel;
		DECLARE TIMEs TIMESTAMP CURRENT_TIMESTAMP;
	    
       
        IF Environment.TypeRequest='OriginalRequest' THEN
        	SET Environment.Originalrequest=CAST(InputRoot.BLOB.BLOB AS CHARACTER);
        	INSERT INTO Database.dbo.Task(Node_Name,Server_Name, MessageFlowLabel, RequestURL, Time, App, TypeRequest, OriginalRequest, BackendRequest, BackendResponse, FinalResponse)
        	VALUES (BNAME,SNAME,FLOWNAME,Environment.UDP.BackendURL,TIMEs,APPNAME,Environment.TypeRequest,Environment.Originalrequest,NULL,NULL,NULL);
        
        ELSEIF Environment.TypeRequest='BackendRequest' THEN
           	DECLARE bitStreama BLOB ASBITSTREAM(InputRoot.JSON.Data CCSID 1208 ENCODING 546 );  
        	SET Environment.BackendRequest=CAST(bitStreama AS CHARACTER CCSID 1208 ENCODING 546);
        	INSERT INTO Database.dbo.Task(Node_Name,Server_Name, MessageFlowLabel, RequestURL, Time, App, TypeRequest, OriginalRequest, BackendRequest, BackendResponse, FinalResponse)
        	VALUES (BNAME,SNAME,FLOWNAME,Environment.UDP.BackendURL,TIMEs,APPNAME,Environment.TypeRequest,NULL,Environment.BackendRequest,NULL,NULL);
        
        ELSEIF Environment.TypeRequest='BackendResponse' THEN
        	SET Environment.BackendResponse=CAST(Environment.BLOB1 AS CHARACTER);
        	INSERT INTO Database.dbo.Task(Node_Name,Server_Name, MessageFlowLabel, RequestURL, Time, App, TypeRequest, OriginalRequest, BackendRequest, BackendResponse, FinalResponse)
        	VALUES (BNAME,SNAME,FLOWNAME,Environment.UDP.BackendURL,TIMEs,APPNAME,Environment.TypeRequest,NULL,NULL,Environment.BackendResponse ,NULL);
        	
        ELSEIF Environment.TypeRequest='FinalResponse' THEN
        	DECLARE bitStreamb BLOB ASBITSTREAM(InputRoot.JSON.Data CCSID 1208 ENCODING 546 );  
        	SET Environment.FinalResponse=CAST(bitStreamb AS CHARACTER CCSID 1208 ENCODING 546);
        	INSERT INTO Database.dbo.Task(Node_Name,Server_Name, MessageFlowLabel, RequestURL, Time, App, TypeRequest, OriginalRequest, BackendRequest, BackendResponse, FinalResponse)
        	VALUES (BNAME,SNAME,FLOWNAME,Environment.UDP.BackendURL,TIMEs,APPNAME,Environment.TypeRequest,NULL,NULL,NULL,Environment.FinalResponse);
        
         ELSEIF Environment.TypeRequest = 'Error_Decription' THEN
         	
         	DECLARE tmp ROW;
			CREATE LASTCHILD OF tmp DOMAIN('XMLNSC') NAME 'XMLNSC';
			SET tmp.XMLNSC.ExceptionList = InputExceptionList;
			SET tmp.BLOB = ASBITSTREAM(tmp.XMLNSC.ExceptionList OPTIONS FolderBitStream CCSID 1208);
-- CAST(tmp.BLOB AS CHAR CCSID 1208
         	
--        	DECLARE ERROR BLOB ASBITSTREAM(Environment.ERROR1 CCSID 1208 ENCODING 546 ); 
        	SET Environment.Error_Decription= cast(tmp.BLOB AS CHARACTER CCSID 1208 ENCODING 546);
            INSERT INTO Database.dbo.Task1 (Node_Name, Server_Name, MessageFlowLabel, Time, App, TypeRequest, Error_Decription, Final_Error_Respones)
        	VALUES (BNAME,SNAME, FLOWNAME, TIMEs, APPNAME, Environment.TypeRequest, Environment.Error_Decription, NULL);
        
         ELSEIF Environment.TypeRequest = 'Final_Error_Respones' THEN
		 	DECLARE ERRORa BLOB ASBITSTREAM(InputRoot.JSON.Data CCSID 1208 ENCODING 546 ); 
        	SET Environment.Final_Error_Respones= CAST(ERRORa AS CHARACTER CCSID 1208 ENCODING 546);
        	INSERT INTO Database.dbo.Task1 (Node_Name, Server_Name, MessageFlowLabel, Time, App, TypeRequest, Error_Decription, Final_Error_Respones)
        	VALUES (BNAME,SNAME, FLOWNAME, TIMEs, APPNAME, Environment.TypeRequest, NULL, Environment.Final_Error_Respones);
        
        
        
        END IF;
  	    

		RETURN TRUE;
	END;
		
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
